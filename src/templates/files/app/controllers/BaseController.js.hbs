'use strict'

const {{upcase entity_name }} = require('../schemas/{{capitalize entity_name }}Schema')
const { getErrorKey, getResponseKey } = require('../dictionary')

const moment = require('moment')
const uuid = require('uuid-base62')
const slug = require('slug')

/**
 *  List {{capitalize entity_plural_name }}
 *  This controller lists all {{capitalize entity_plural_name }} in the DB.
 *
 *  @method GET
 */
exports.list{{capitalize entity_plural_name }} = async (req, res, next) => {
  let { query, cursor, select } = req.querymen
  let mongoQuery = Object.assign({}, query, { _deleted: false })

  try {
    let {{lowercase entity_plural_name }} = await {{upcase entity_name }}.find(mongoQuery, select, cursor)
    let count = await {{upcase entity_name }}.count(mongoQuery)

    res.formatResponse(200, {
      payload: {{lowercase entity_plural_name }},
      total: count
    })
  } catch (error) {
    error.status = 500
    next(error)
  }
}

/**
 *  Create {{capitalize entity_name }}
 *  This controller creates a new {{capitalize entity_name }} in the db.
 *
 *  @method POST
 */
exports.create{{capitalize entity_name }} = async (req, res, next) => {
  let { body, params } = req

  try {
    let {{lowercase entity_name }} = new {{upcase entity_name }}(Object.assign({}, body, {
      id: uuid.v4(),
      _slug: slug(body.name, { lower: true, replacement: '_' }),
      _created_at: moment()
    }))

    let saved = await  {{lowercase entity_name }}.save()

    res.formatResponse(201, {
      payload: saved
    })
  } catch (error) {
    if (error.code === 11000) {
      let badRequest = new Error(getErrorKey('#DUPLICATE_ENTITY'))
      badRequest.status = 400
      next(badRequest)
    } else {
      let serverError = new Error(getErrorKey('#INTERNAL_SERVER_ERROR'))
      serverError.status = 500
      serverError.original = error
      next(serverError)
    }
  }
}

/**
 *  Detail {{capitalize entity_name }}
 *  This controller gets data for a {{capitalize entity_name }} based
 *  on de Id.
 *
 *  @method GET
 */
exports.detail{{capitalize entity_name }} = async (req, res, next) => {
  let { params } = req
  let { select } = req.querymen
  let mongoQuery = Object.assign({}, { id: params.{{lowercase entity_name }}Id, _deleted: false })

  try {
    let {{lowercase entity_name }} = await {{upcase entity_name }}.findOne(mongoQuery, select)

    if ({{lowercase entity_name }}) {
      res.formatResponse(200, {
        payload: {{lowercase entity_name }}
      })
    } else {
      let notFound = new Error(getErrorKey('#RESOURCE_NOT_FOUND'))
      notFound.status = 404
      next(notFound)
    }
  } catch (error) {
    error.status = 500
    error.original = error
    next(error)
  }
}

/**
 *  Update {{capitalize entity_name }}
 *  This controller updates a {{capitalize entity_name }} in the db
 *  based on de Id.
 *
 *  @method POST
 */
exports.update{{capitalize entity_name }} = async (req, res, next) => {
  let { body, params } = req
  let mongoQuery = Object.assign({}, { id: params.{{lowercase entity_name }}Id, _deleted: false })

  try {
    let {{lowercase entity_name }} = await {{upcase entity_name }}.findOne(mongoQuery)

    if ({{lowercase entity_name }}) {
      let update = Object.assign({{lowercase entity_name }}, body, {
        id: {{lowercase entity_name }}.id,
        _created_at: {{lowercase entity_name }}._created_at,
        _updated_at: moment()
      })

      let saved = await update.save()

      res.formatResponse(201, {
        payload: saved
      })
    } else {
      let notFound = new Error(getErrorKey('#RESOURCE_NOT_FOUND'))
      notFound.status = 404
      next(notFound)
    }
  } catch (error) {
    error.status = 500
    next(error)
  }
}

/**
 *  Delete {{capitalize entity_name }}
 *  This controller makes a soft delete of a {{capitalize entity_name }} based
 *  on his Id.  
 *  @method POST
 */
exports.delete{{capitalize entity_name }} = async (req, res, next) => {
  let { params } = req
  let mongoQuery = Object.assign({}, { id: params.{{lowercase entity_name }}Id, _deleted: false })

  try {
    let {{lowercase entity_name }} = await {{upcase entity_name }}.findOne(mongoQuery)

    if ({{lowercase entity_name }}) {
      let update = Object.assign({{lowercase entity_name }}, { _deleted: true })
      let saved = await update.save()

      res.formatResponse(201, {
        message: getResponseKey('#DELETE_SUCCESS')
      })
    } else {
      let notFound = new Error(getErrorKey('#RESOURCE_NOT_FOUND'))
      notFound.status = 404
      next(notFound)
    }
  } catch (error) {
    error.status = 500
    next(error)
  }
}
